// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/26/2023 21:14:01"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          tone_selector
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module tone_selector_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst;
reg [3:0] switches;
// wires                                               
wire out;

// assign statements (if any)                          
tone_selector i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.out(out),
	.rst(rst),
	.switches(switches)
);
initial 
begin 
#2800000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #20000 1'b0;
end 
// switches[ 3 ]
initial
begin
	switches[3] = 1'b0;
	switches[3] = #550000 1'b1;
end 
// switches[ 2 ]
initial
begin
	switches[2] = 1'b0;
	switches[2] = #240000 1'b1;
	switches[2] = #310000 1'b0;
	switches[2] = #650000 1'b1;
end 
// switches[ 1 ]
initial
begin
	switches[1] = 1'b0;
	switches[1] = #120000 1'b1;
	switches[1] = #120000 1'b0;
	switches[1] = #140000 1'b1;
	switches[1] = #170000 1'b0;
	switches[1] = #240000 1'b1;
	switches[1] = #410000 1'b0;
	switches[1] = #580000 1'b1;
end 
// switches[ 0 ]
initial
begin
	switches[0] = 1'b0;
	switches[0] = #120000 1'b1;
	switches[0] = #2360000 1'b0;
end 
endmodule

